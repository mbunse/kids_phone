worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
pid /run/nginx.pid;
error_log /tmp/nginx.error.log;

events {
    worker_connections 1024; # increase if you have lots of clients
    accept_mutex off; # set to 'on' if nginx worker_processes > 1
    # 'use epoll;' to enable for Linux 2.6+
    # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
    include mime.types;
    # fallback in case we can't determine a type

    ##
    # SSL Settings
	##

    server_names_hash_bucket_size 64;
    default_type application/octet-stream;
    access_log /tmp/nginx.access.log combined;
    sendfile on;
	keepalive_timeout 65;

    server {
        # if no Host match, close the connection to prevent host spoofing
        listen 80 default_server;
        return 444;
    }

    server {
        # use 'listen 80 deferred;' for Linux
        # use 'listen 80 accept_filter=httpready;' for FreeBSD
        listen 80;
        client_max_body_size 4G;
        server_name  localhost;

        # set the correct host(s) for your site
        # server_name example.com www.example.com;

        keepalive_timeout 5;

        # path for static files
        #root /path/to/app/current/public;

        location / {
        # checks for static file, if not found proxy to app
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header Host $http_host;
        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://localhost:8000;
    }

    # error_page 500 502 503 504 /500.html;
    # location = /500.html {
    #   root /path/to/app/current/public;
    # }
  }
}